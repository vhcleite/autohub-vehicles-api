name: CI/CD Pipeline - AutoHub Vehicles API Java

# Gatilhos: Rodar em push para main/develop e PRs para main/develop
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # --- Job de Build e Teste (CI) ---
  build-and-test:
    name: Build & Test Vehicles API # Nome do Job Atualizado
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'maven'

      - name: Build and Test with Maven Wrapper
        run: ./mvnw clean package

  # --- Job de Deploy (CD) ---
  deploy-to-lambda:
    name: Deploy Vehicles API to AWS Lambda (Dev)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'maven'

      - name: Build Shaded JAR with Maven Wrapper
        run: ./mvnw clean package

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Assume OIDC (Recomendado) ou Access Keys
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }} # MESMA Role pode ser usada se tiver permissão para este lambda/s3 key
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Find Shaded JAR File
        id: find_jar
        run: |
          # Ajuste o padrão do nome do JAR se for diferente
          JAR_FILE=$(find target -maxdepth 1 -name 'autohub-vehicles-api-*-SNAPSHOT-aws.jar' -not -name '*-plain.jar' -not -name '*-original.jar' | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Shaded JAR file not found in target/!"
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT

      - name: Upload JAR to S3
        # Usa secrets específicos para o bucket/key DESTA API
        run: |
          aws s3 cp ${{ steps.find_jar.outputs.jar_path }} s3://${{ secrets.S3_DEPLOY_BUCKET }}/${{ secrets.S3_DEPLOY_KEY_VEHICLES }}
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Update HTTP Lambda Function Code (Dev)
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_VEHICLES_HTTP }} \
            --s3-bucket ${{ secrets.S3_DEPLOY_BUCKET }} \
            --s3-key ${{ secrets.S3_DEPLOY_KEY_VEHICLES }} \
            --publish
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Update SQS Lambda Function Code (Dev)
        run: |
          
          # --- DEBUGGING - REMOVE AFTER USE ---
          echo "DEBUG SQS Lambda Name: >>${{ secrets.LAMBDA_FUNCTION_NAME_VEHICLES_SQS }}<<"
          echo "DEBUG S3 Bucket: >>${{ secrets.S3_DEPLOY_BUCKET }}<<"
          echo "DEBUG S3 Key: >>${{ secrets.S3_DEPLOY_KEY_VEHICLES }}<<"
          # --- END DEBUGGING ---
          
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_VEHICLES_SQS }} \
            --s3-bucket ${{ secrets.S3_DEPLOY_BUCKET }} \
            --s3-key ${{ secrets.S3_DEPLOY_KEY_VEHICLES }} \
            --publish
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
